Group Members:
Adam Casey
Jacob Sphatt

Database:
institutional_casey

User Manual:
First the user is prompted with a login page where a username and password that is stored in institutional_casey.users must be entered to login.
If the username and password that is entered does not match any in the table a login does not occur.
After the user is logged in the have access to the items avilible to be sold as a series of buttons on the left side of the screen.
The user can add buttons to the current transaction simply by clicking them.
Items that are added to the current transaction in this manner appear in the table at the right side of the screen. 
If a user has added an item to the transaction that they would like to remove they can click on it's entry in the table to remove one copy of that item.
If the user wishes to remove all items from the transaction they click on the void button, this will remove all items from the transaction.
If the user has added the correct items and would like to complete a sale they can click on the sale button.
All sales are recored in the database.
After the user has made a sale they can view a receipt for that sale by clicking the view receipt button.
After the user is finished they can logout by clicking the logout button.

API Appendix:

Uses button api for calls to remove transactions, add tansactions,
update prices, get buttons, etc. (Basically everything)
All API calls are in click.js
Supported API calls:

/getButtons: Gets buttons from till_buttons table
/clickButton: updates the current_transaction table to reflect the item clicked to be added
/removeItem: updates the current_transaction table to reflect the item clicked to be removed
/totalAmount: Gets the total cost of all items in current_transaction
/getPrices: Gets the prices of the items in the current_transaction table
/getTrans: Gets the current_transaction table
/getUsers: Gets the users from the users table
/void: Voids the current_transaction AKA truncates the current_transaction table in the database
/makeSale: Truncates the current_transaction table and copies its contents into the transaction_archive
/ticketize: Creates a receipt from the current_transaction table before it gets truncated

Login and logout functionality are handled on the client side so the only API related to that functionality is getUsers
When we make a sale we call ticketize, which saves the current_transaction data on the client side as a ticket,
then call make sale which truncates the data in current_transaction and sends it to the archive table.
